diff --git a/third_party/blink/renderer/core/loader/image_loader.cc b/third_party/blink/renderer/core/loader/image_loader.cc
index 81a68656eeff73515430ea71d9a3a25361897eeb..48cc72d4159071b29721d2c2cc23c6371cdaffc0 100644
--- a/third_party/blink/renderer/core/loader/image_loader.cc
+++ b/third_party/blink/renderer/core/loader/image_loader.cc
@@ -65,6 +65,13 @@
 #include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 #include "third_party/blink/renderer/platform/weborigin/security_policy.h"
 
+#include "brave/third_party/blink/brave_page_graph/buildflags/buildflags.h"
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+#include "third_party/blink/renderer/core/dom/dom_node_ids.h"
+#include "brave/third_party/blink/brave_page_graph/types.h"
+#include "brave/third_party/blink/brave_page_graph/page_graph.h"
+#endif
+
 namespace blink {
 
 namespace {
@@ -457,6 +464,17 @@ void ImageLoader::DoUpdateFromElement(
   if (!document.IsActive())
     return;
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  if (element_->GetDocument().GetPageGraph() != nullptr) {
+    ImageResource* image_resource = ImageResourceForImageDocument();
+    Resource* resource = static_cast<Resource*>(image_resource);
+    element_->GetDocument().GetPageGraph()->RegisterRequestStartFromElm(
+      DOMNodeIds::IdForNode(element_),
+      resource->InspectorId(), url,
+      ::brave_page_graph::RequestType::kRequestTypeImage);
+  }
+#endif
+
   AtomicString image_source_url = element_->ImageSourceURL();
   ImageResourceContent* new_image_content = nullptr;
   if (!url.IsNull() && !url.IsEmpty()) {
@@ -775,6 +793,17 @@ void ImageLoader::ImageNotifyFinished(ImageResourceContent* resource) {
     return;
   }
 
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+  {
+    ImageResource* image_resource = ImageResourceForImageDocument();
+    if (element_->GetDocument().GetPageGraph() != nullptr) {
+      element_->GetDocument().GetPageGraph()->RegisterRequestComplete(
+        image_resource->InspectorId(),
+        image_resource->GetType());
+    }
+  }
+#endif
+
   if (resource->ErrorOccurred()) {
     pending_load_event_.Cancel();
 
@@ -851,8 +880,17 @@ void ImageLoader::DispatchPendingLoadEvent(
   if (!image_content_)
     return;
   CHECK(image_complete_);
-  if (GetElement()->GetDocument().GetFrame())
+  if (GetElement()->GetDocument().GetFrame()) {
+#if BUILDFLAG(BRAVE_PAGE_GRAPH_ENABLED)
+    if (GetElement()->GetDocument().GetPageGraph() != nullptr) {
+      ImageResource* image_resource = ImageResourceForImageDocument();
+      GetElement()->GetDocument().GetPageGraph()->RegisterRequestComplete(
+        image_resource->InspectorId(),
+        ResourceType::kResourceTypeImage);
+    }
+#endif
     DispatchLoadEvent();
+  }
 
   // Checks Document's load event synchronously here for performance.
   // This is safe because DispatchPendingLoadEvent() is called asynchronously.
@@ -861,8 +899,9 @@ void ImageLoader::DispatchPendingLoadEvent(
 
 void ImageLoader::DispatchPendingErrorEvent(
     std::unique_ptr<IncrementLoadEventDelayCount> count) {
-  if (GetElement()->GetDocument().GetFrame())
+  if (GetElement()->GetDocument().GetFrame()) {
     GetElement()->DispatchEvent(*Event::Create(event_type_names::kError));
+  }
 
   // Checks Document's load event synchronously here for performance.
   // This is safe because DispatchPendingErrorEvent() is called asynchronously.
